{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.js","components/Login/Login.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","minLengthCreator","minLength","FormControl","input","meta","props","child","hasError","touched","error","className","children","class","Textarea","Input","restProps","type","Password","minLength2","minLength6","maxLength50","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","Group","controlId","Label","component","name","placeholder","validate","label","Check","checked","onChange","role","variant","connect","state","isAuth","auth","login","logout","to","formData","email","password","rememberMe"],"mappings":"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","file":"static/js/7.0e379a78.chunk.js","sourcesContent":["export const required = value => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}\r\n\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n    if (value.length < minLength) return `Min length is ${minLength} symbols`;\r\n\r\n    return undefined;\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nconst FormControl = ({ input, meta, child, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className='form-group'>\r\n            {props.children}\r\n            {hasError && <div class=\"invalid-feedback\">{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n\r\n    const { input, meta, child, ...restProps } = props;\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...props} className={\"form-control\" + \" \" + (hasError ? 'is-invalid' : '')}></textarea>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props) => {\r\n\r\n    const { input, meta, child, ...restProps } = props;\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <FormControl {...props}>\r\n            <input type=\"text\" {...input} {...restProps} className={\"form-control\" + \" \" + (hasError ? 'is-invalid' : '')} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Password = (props) => {\r\n\r\n    const { input, meta, child, ...restProps } = props;\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <FormControl {...props}>\r\n            <input type=\"password\" {...input} {...restProps} className={\"form-control\" + \" \" + (hasError ? 'is-invalid' : '')} />\r\n        </FormControl>\r\n    )\r\n}","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { login, logout } from '../../redux/auth-reducer';\r\n\r\nimport { minLengthCreator, maxLengthCreator, required } from \"../../utils/validators/validators\";\r\nimport { Input, Password } from \"../common/FormsControls/FormsControls\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst minLength2 = minLengthCreator(2);\r\nconst minLength6 = minLengthCreator(6);\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n\r\n    const ReduxFormControl = ({ input, meta, type, placeholder, min, max }) => {\r\n        return (\r\n            <Form.Control\r\n                type={type}\r\n                name={input.name}\r\n                placeholder={placeholder}\r\n                min={min}\r\n                max={max}\r\n                value={input.value}\r\n                onChange={input.onChange} />\r\n        )\r\n    }\r\n\r\n    const ReduxFormCheckbox = ({ input, meta, type, label }) => {\r\n        return (\r\n            <Form.Check\r\n                type={type}\r\n                name={input.name}\r\n                label={label}\r\n                value={input.value}\r\n                checked={input.checked}\r\n                onChange={input.onChange} />\r\n        )\r\n    }\r\n\r\n    return <Form onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"formBasicLogin\">\r\n            <Form.Label>Login</Form.Label>\r\n            <Field\r\n                component={Input}\r\n                name={\"email\"}\r\n                type={\"email\"}\r\n                placeholder=\"Login\"\r\n                validate={[required, minLength2, maxLength50]}\r\n            />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Field\r\n                component={Password}\r\n                name={\"password\"}\r\n                type={\"password\"}\r\n                placeholder=\"Password\"\r\n                validate={[required, minLength6, maxLength50]}\r\n            />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicCheckbox\">\r\n            <Field component={ReduxFormCheckbox} name={\"rememberMe\"} type={\"checkbox\"} label={\"Remember me\"} />\r\n        </Form.Group>\r\n\r\n        { error &&\r\n            <div class=\"alert alert-danger\" role=\"alert\">\r\n                {error}\r\n            </div>\r\n        }\r\n\r\n        <Button variant=\"primary\" type=\"submit\">\r\n            Submit\r\n        </Button>\r\n    </Form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm);\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return <Container>\r\n        <Row>\r\n            <Col>\r\n                <h1>Login</h1>\r\n                <LoginReduxForm onSubmit={onSubmit} />\r\n            </Col>\r\n        </Row>\r\n    </Container>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default connect(mapStateToProps, { login, logout })(Login);"],"sourceRoot":""}